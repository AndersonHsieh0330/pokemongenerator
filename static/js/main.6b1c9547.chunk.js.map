{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["InfoCell","props","className","cellName","cellData","App","useEffect","document","title","useState","search","setSearch","pokemonCount","setPokemonCount","typer","pokemon","setPokemon","min","max","Axios","get","Math","ceil","floor","random","then","response","console","log","data","count","url","pokemonURL","results","name","img","sprites","front_default","types","hp","stats","base_stat","attack","defense","style","display","flexDirection","onClick","src","marginRight","alignSelf","alignItems","map","i","textIndent","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6NAAe,I,4BCWf,SAASA,EAASC,GAChB,OAAQ,sBAAKC,UAAY,WAAjB,UACR,+BAAKD,EAAME,SAAX,OAA0B,4BAAKF,EAAMG,cA+ExBC,MA5Ef,WAEEC,qBAAU,WACRC,SAASC,MAAQ,sBACjB,IAGF,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAGA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEA,EAA8BJ,mBAAS,CAACK,MAAM,KAA9C,mBAAOC,EAAP,KAAgBC,EAAhB,KAiCA,OA/BDV,qBAAU,WAzBX,IAAsBW,EAAKC,EA0BzBC,IAAMC,IAAN,6DA1BoBH,EA0BwD,EA1BnDC,EA0BqDN,EAzB9EK,EAAMI,KAAKC,KAAKL,GAChBC,EAAMG,KAAKE,MAAML,GACVG,KAAKE,MAAMF,KAAKG,UAAYN,EAAMD,GAAOA,MAwB/CQ,MAAK,SAAAC,GACJC,QAAQC,IAAR,8BAAmCF,EAASG,KAAKC,MAAjD,cACAjB,EAAgBa,EAASG,KAAKC,OAE9B,IAQgBC,EARZC,EAAaN,EAASG,KAAKI,QAAQ,GAAGF,IAC1CJ,QAAQC,IAAR,qCAA0CI,IAEzB,OAAdA,IAKaD,EAJLC,EAKbb,IAAMC,IAAIW,GACTN,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZV,EAAW,CACTkB,KAAKR,EAASG,KAAKK,KACnBC,IAAIT,EAASG,KAAKO,QAAQC,cAC1BvB,MAAMY,EAASG,KAAKS,MACpBC,GAAGb,EAASG,KAAKW,MAAM,GAAGC,UAC1BC,OAAOhB,EAASG,KAAKW,MAAM,GAAGC,UAC9BE,QAAQjB,EAASG,KAAKW,MAAM,GAAGC,YAEjCd,QAAQC,IAAIb,YAfV,CAACL,IAsBH,sBAAKR,UAAY,MAAjB,UACE,sDACC,qBAAKA,UAAY,WAAjB,SACE,sBAAK0C,MAAO,CAACC,QAAQ,OAAOC,cAAc,UAA1C,UACC,oDACA,mDACA,wBAAQC,QAAW,kBAAIpC,GAAWD,IAAlC,yBAGH,sBAAKR,UAAY,UAAjB,UACA,qBAAKA,UAAY,aAAa8C,IAAKjC,EAAQoB,IAAKS,MAAO,CAACK,YAAY,OACjE,sBAAK/C,UAAY,OAAjB,UACA,cAACF,EAAD,CAAUG,SAAW,OAAOC,SAAUW,EAAQmB,OAE9C,sBAAKU,MAAO,CAACC,QAAQ,OAAQC,cAAc,MAAOI,UAAU,aAAcC,WAAW,UAArF,UACE,wCACDpC,EAAQD,MAAMsC,KAAI,SAAAC,GAAC,OAAI,mBAAGT,MAAO,CAACU,WAAW,IAAtB,SAA4BD,EAAEE,KAAKrB,aAGzD,cAAClC,EAAD,CAAUG,SAAW,KAAKC,SAAUW,EAAQwB,KAC9C,cAACvC,EAAD,CAAUG,SAAW,SAASC,SAAUW,EAAQ2B,SAChD,cAAC1C,EAAD,CAAUG,SAAW,UAAUC,SAAUW,EAAQ4B,oBCxE5Ca,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAAS4D,eAAe,SAM1BX,M","file":"static/js/main.6b1c9547.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport Axios from \"axios\";\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction InfoCell(props){\r\n  return (<div className = \"InfoCell\">\r\n  <h3>{props.cellName}:</h3><p >{props.cellData}</p></div>)\r\n}\r\n\r\nfunction App() {\r\n  //empty dependency array for useEffect to only run once\r\n  useEffect(()=>{\r\n    document.title = \"Pokemon Generator\"\r\n  },[])\r\n\r\n  //state for \"search button\" click\r\n  const [search, setSearch] = useState(false)\r\n\r\n  //on Oct 20, 2021 the count is 1117, update the count after first request\r\n  const [pokemonCount, setPokemonCount] = useState(1117)\r\n\r\n  const [pokemon, setPokemon] = useState({typer:[]})\r\n\r\n useEffect(()=>{\r\n  Axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=1&offset=${getRandomInt(0,pokemonCount)}`)\r\n  .then(response => {\r\n    console.log(`There are currently ${response.data.count} pokemons`)\r\n    setPokemonCount(response.data.count)\r\n    \r\n    let pokemonURL = response.data.results[0].url\r\n    console.log(`currnet pokemon found url: ${pokemonURL}`)\r\n    \r\n    if(pokemonURL!== null){\r\n    getPokemon(pokemonURL)}\r\n })}, [search])\r\n\r\n\r\nfunction getPokemon(url){\r\n  Axios.get(url)\r\n  .then(response =>{\r\n    console.log(response)\r\n    setPokemon({\r\n      name:response.data.name,\r\n      img:response.data.sprites.front_default,\r\n      typer:response.data.types,\r\n      hp:response.data.stats[0].base_stat,\r\n      attack:response.data.stats[1].base_stat,\r\n      defense:response.data.stats[2].base_stat\r\n    })\r\n    console.log(pokemon)\r\n  })\r\n\r\n}\r\n\r\n  return (\r\n    \r\n    <div className = \"App\">\r\n      <title>Pokemon Generator</title>\r\n       <div className = \"TitleBox\">\r\n         <div style={{display:'flex',flexDirection:'column'}}>\r\n          <h1> Pokemon Generator</h1>\r\n          <h3>by Anderson Hsieh</h3>\r\n          <button onClick = {()=>setSearch(!search)}>Search</button>\r\n       </div>\r\n       </div>\r\n       <div className = \"DataBox\">\r\n       <img className = \"PokemonIMG\" src={pokemon.img} style={{marginRight:100}}></img>\r\n          <div className = \"Info\">\r\n          <InfoCell cellName = \"Name\" cellData={pokemon.name}/>\r\n          \r\n          <div style={{display:'flex', flexDirection:'row', alignSelf:'flex-start', alignItems:'center'}}>\r\n            <h3>Type: </h3>\r\n          {pokemon.typer.map(i => <p style={{textIndent:10}}>{i.type.name}</p>)}\r\n          </div>\r\n\r\n            <InfoCell cellName = \"HP\" cellData={pokemon.hp}/>\r\n          <InfoCell cellName = \"Attack\" cellData={pokemon.attack}/>\r\n          <InfoCell cellName = \"Defense\" cellData={pokemon.defense}/>\r\n       </div>\r\n       </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}